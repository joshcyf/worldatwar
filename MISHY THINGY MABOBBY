level.cyfShaders = strTok("waypoint_bombsquad;specialty_armorvest;specialty_boost;specialty_bulletaccuracy;specialty_bulletdamage;specialty_bulletpenetration;specialty_explosivedamage;specialty_exposeenemy;specialty_extraammo;specialty_fastreload;specialty_fireproof;specialty_gas_mask;specialty_gpsjammer;specialty_greased_barrings;specialty_grenadepulldeath;specialty_holdbreath;specialty_leadfoot;specialty_locked;specialty_locked_big;specialty_locked_challenge;specialty_longersprint;specialty_new;specialty_null;specialty_ordinance;specialty_pin_back;specialty_pistoldeath;specialty_quieter;specialty_rof;specialty_shades;specialty_specialgrenade;specialty_twoprimaries;specialty_water_cooled;specialty_weapon_c4;specialty_weapon_claymore;stance_crouch;stance_prone;stance_stand;stance_swim;rank_2ndlt1;rank_maj1;rank_ltcol1;rank_col1;rank_bgen1;rank_majgen1;rank_ltgen2;rank_comm1;hudicon_japanese_war;hudicon_american_ctf_flag_carry;hud_momentum_notification_blitzkrieg;hud_squad_symbol;waypoint_second_chance", ";" );
toggle_spawnpingmarker()
{
	if(!self.spawnedping)
	{
		self.spawnedping = true;

		self.cyfWaypoint = self cyfWaypoint( self.pers["waypointPos"], self.pers["waypointShader"], self.team );
		self.cyfWaypoint thread destroyafterawhile(99999);
	
		self iPrintln("Ping spawned.");
	}
	else
	{
		self.spawnedping = false;
		self iPrintln("Ping removed.");
		self.cyfWaypoint destroy();
	}
}
saveWaypointPos()
{
	self.pers["waypointPos"] = self.origin;
	p("Waypoint position saved.");
}
cyfWaypoint(origin, shader, team)
{
	if(isDefined(self.cyfWaypoint))
		self.cyfWaypoint destroy();

	self playsound( "ammo_pickup_plr" );
	newping = newteamhudelem( team );
	newping.x = origin[0];
	newping.y = origin[1];
	newping.z = origin[2] + 15;
	newping.alpha = 0.8;
	newping setShader( self.pers["waypointShader"], 14, 14 );
	newping setWaypoint( true, self.pers["waypointShader"]);
	if(shader == "waypoint_bombsquad")
	{
		newping setShader( self.pers["waypointShader"], 14, 14 );
		newping setWaypoint( false );
	}
	//newping fadeovertime( 0.25 );
	return newping;
}
destroyafterawhile(seconds)
{
	wait seconds;
	self fadeovertime(0.25);
	self.alpha = 0;
	wait 0.25;
	self destroy();
}

changeWaypointShader()
{
	if(!isDefined(self.waypointShader))self.waypointShader = 0;

	if(self.waypointShader < level.cyfShaders.size)
		self.waypointShader += 1;

	else if(self.waypointShader == level.cyfShaders.size)
	{
		self.waypointShader = 0;
	}
	wait 0.05;
	self iPrintln("Waypoint changed to " +level.cyfShaders[self.waypointShader]);
	self.pers["waypointShader"] = level.cyfShaders[self.waypointShader];
	wait 0.05;
	self.cyfWaypoint = self cyfWaypoint( self.pers["waypointPos"], self.pers["waypointShader"], self.team );


}
